{"version":3,"sources":["serviceWorker.ts","constants/api-urls.constants.js","index.tsx","components/spinner/Spinner.tsx"],"names":["Boolean","window","location","hostname","match","API","a","axios","get","pages","resp","App","default","ReactDOM","render","StrictMode","data","document","getElementById","console","error","initApp","className","Spinner","size","navigator","serviceWorker","ready","then","registration","unregister","catch","message","color","style","defaultSize","width","height","role","displayName"],"mappings":"qOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uBClBOC,EACC,iB,iBCQD,uCAAG,gCAAAC,EAAA,+EAEYC,IAAMC,IAAIH,GAFtB,cAEFI,EAFE,gBAGW,mDAHX,OAGFC,EAHE,OAIFC,EAAMD,EAAKE,QAEjBC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAACJ,EAAD,CAAKF,MAAOA,EAAMO,QAEtBC,SAASC,eAAe,SAVpB,kDAaRC,QAAQC,MAAR,MAbQ,0DAAH,qDAiBbC,GAEAR,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,yBAAKO,UAAU,2DACX,kBAACC,EAAA,EAAD,CAASC,KAAM,MAGvBP,SAASC,eAAe,SFyGtB,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAX,GACLD,QAAQC,MAAMA,EAAMY,a,2DGxItBT,EAAU,SAAC,GAA4C,IAA3CD,EAA0C,EAA1CA,UAAWW,EAA+B,EAA/BA,MAAOT,EAAwB,EAAxBA,KAAMU,EAAkB,EAAlBA,MAChCC,EAAW,UAAOX,GAAQ,EAAf,OACjB,OACI,yBACIF,UAAS,yBAAoBA,EAApB,iBAAsCW,GAAS,WACxDC,MAAK,aAAGE,MAAOD,EAAaE,OAAQF,GAAgBD,GACpDI,KAAK,UACL,0BAAMhB,UAAU,WAAhB,gBAIZC,EAAQgB,YAAc,UAEPhB,Q","file":"static/js/main.d3dca344.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const API = {\n  PAGES_DATA: '/api/app-pages',\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css'\nimport Spinner from \"./components/spinner/Spinner\";\nimport { API } from \"./constants/api-urls.constants\";\nimport axios from 'axios';\n\nconst initApp = async () => {\n    try {\n        const pages = await axios.get(API.PAGES_DATA);\n        const resp = await import('./App');\n        const App = resp.default;\n\n        ReactDOM.render(\n            <React.StrictMode>\n                <App pages={pages.data} />\n            </React.StrictMode>,\n            document.getElementById('root')\n        );\n    } catch (e) {\n        console.error(e);\n    }\n};\n\ninitApp();\n\nReactDOM.render(\n    <React.StrictMode>\n        <div className='vh-100 d-flex justify-content-center align-items-center'>\n            <Spinner size={3}/>\n        </div>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\ntype Props = {\n    className?: string,\n    color?: 'primary' | 'secondary' | 'success' | 'danger' | 'info',\n    size?: number,\n    style?: object\n}\n\nconst Spinner = ({className, color, size, style}: Props) => {\n    const defaultSize  = `${size || 2}rem`;\n    return (\n        <div\n            className={`spinner-border ${className} text-${color || 'primary'}`}\n            style={{width: defaultSize, height: defaultSize, ...style}}\n            role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n        </div>);\n};\n\nSpinner.displayName = 'Spinner';\n\nexport default Spinner;\n"],"sourceRoot":""}